def get_alpha_beta(data, probTable, charToInt):
    # l = len(charToInt);
    alpha = [];
    beta = [];
    for sentence in data:
        sen_a = [];
        sen_b = [];
        l = len(sentence);
        sen_a.append((0, 1));
        sen_b.append((0.5, 0.5))
        for i in xrange(0, l-1):
            ci = charToInt.get(sentence[i][0]);
            na_0 = sen_a[i][0]*exp(probTable[0][0][ci]) + sen_a[i][1]*exp(probTable[1][0][ci]);
            na_1= sen_a[i][0]*exp(probTable[0][1][ci]) + sen_a[i][1]*exp(probTable[1][1][ci]);
            sen_a.append((na_0, na_1));
            j = l-1-i;
            ci = charToInt.get(sentence[j][0]);
            nb_0 = sen_b[0][0]*exp(probTable[0][0][ci]) + sen_b[0][1]*exp(probTable[0][1][ci]);
            nb_1 = sen_b[0][0]*exp(probTable[1][0][ci]) + sen_b[0][1]*exp(probTable[1][1][ci]);
            sen_b.insert(0, (nb_0, nb_1));
        alpha.append(sen_a);
        beta.append(sen_b);
    return alpha, beta;